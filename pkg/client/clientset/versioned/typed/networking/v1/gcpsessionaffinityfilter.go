/*
* Copyright 2024 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     https://www.apache.org/licenses/LICENSE-2.0
*
*     Unless required by applicable law or agreed to in writing, software
*     distributed under the License is distributed on an "AS IS" BASIS,
*     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*     See the License for the specific language governing permissions and
*     limitations under the License.
 */

// Code generated by client-gen. DO NOT EDIT.

package v1

import (
	context "context"

	networkingv1 "github.com/GoogleCloudPlatform/gke-gateway-api/apis/networking/v1"
	scheme "github.com/GoogleCloudPlatform/gke-gateway-api/pkg/client/clientset/versioned/scheme"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	gentype "k8s.io/client-go/gentype"
)

// GCPSessionAffinityFiltersGetter has a method to return a GCPSessionAffinityFilterInterface.
// A group's client should implement this interface.
type GCPSessionAffinityFiltersGetter interface {
	GCPSessionAffinityFilters(namespace string) GCPSessionAffinityFilterInterface
}

// GCPSessionAffinityFilterInterface has methods to work with GCPSessionAffinityFilter resources.
type GCPSessionAffinityFilterInterface interface {
	Create(ctx context.Context, gCPSessionAffinityFilter *networkingv1.GCPSessionAffinityFilter, opts metav1.CreateOptions) (*networkingv1.GCPSessionAffinityFilter, error)
	Update(ctx context.Context, gCPSessionAffinityFilter *networkingv1.GCPSessionAffinityFilter, opts metav1.UpdateOptions) (*networkingv1.GCPSessionAffinityFilter, error)
	// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
	UpdateStatus(ctx context.Context, gCPSessionAffinityFilter *networkingv1.GCPSessionAffinityFilter, opts metav1.UpdateOptions) (*networkingv1.GCPSessionAffinityFilter, error)
	Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listOpts metav1.ListOptions) error
	Get(ctx context.Context, name string, opts metav1.GetOptions) (*networkingv1.GCPSessionAffinityFilter, error)
	List(ctx context.Context, opts metav1.ListOptions) (*networkingv1.GCPSessionAffinityFilterList, error)
	Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *networkingv1.GCPSessionAffinityFilter, err error)
	GCPSessionAffinityFilterExpansion
}

// gCPSessionAffinityFilters implements GCPSessionAffinityFilterInterface
type gCPSessionAffinityFilters struct {
	*gentype.ClientWithList[*networkingv1.GCPSessionAffinityFilter, *networkingv1.GCPSessionAffinityFilterList]
}

// newGCPSessionAffinityFilters returns a GCPSessionAffinityFilters
func newGCPSessionAffinityFilters(c *NetworkingV1Client, namespace string) *gCPSessionAffinityFilters {
	return &gCPSessionAffinityFilters{
		gentype.NewClientWithList[*networkingv1.GCPSessionAffinityFilter, *networkingv1.GCPSessionAffinityFilterList](
			"gcpsessionaffinityfilters",
			c.RESTClient(),
			scheme.ParameterCodec,
			namespace,
			func() *networkingv1.GCPSessionAffinityFilter { return &networkingv1.GCPSessionAffinityFilter{} },
			func() *networkingv1.GCPSessionAffinityFilterList { return &networkingv1.GCPSessionAffinityFilterList{} },
		),
	}
}
